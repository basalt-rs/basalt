name: "publish"
permissions:
  contents: write

on:
  workflow_dispatch:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+.?*"

jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract.outputs.version }}
    steps:
      - name: Extract version from ref
        id: extract
        run: |
          VERSION="${GITHUB_REF_NAME#v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  publish-tauri:
    needs: [get-version]
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest" # for Arm based macs (M1 and above).
            args: "--target aarch64-apple-darwin"
          - platform: "macos-latest" # for Intel based macs.
            args: "--target x86_64-apple-darwin"
          - platform: "ubuntu-22.04"
            args: ""
          - platform: "windows-latest"
            args: ""
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Get release info for tag
        id: release
        uses: actions/github-script@v8
        with:
          script: |
            try {
              const tag = context.ref.replace("refs/tags/", "");
              const release = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag,
              });
              core.setOutput("draft", release.data.draft);
              core.setOutput("prerelease", release.data.prerelease);
            } catch (e) {
              // No release exists for this tag
              core.setOutput("draft", false);
              core.setOutput("prerelease", false);

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: setup node
        uses: actions/setup-node@v5
        with:
          node-version: lts/*
          cache: "npm" # Set this to npm, yarn or pnpm.
          cache-dependency-path: "client/package-lock.json"

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable # Set this to dtolnay/rust-toolchain@nightly
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: install frontend dependencies
        # If you don't have `beforeBuildCommand` configured you may want to build your frontend here too.
        run: npm install # change this to npm or pnpm depending on which one you use.
        working-directory: ./client

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ needs.get-version.outputs.version }}
          releaseDraft: ${{ steps.release.outputs.draft }}
          prerelease: ${{ steps.release.outputs.prerelease }}
          args: ${{ matrix.args }}

  push-containers:
    runs-on: blacksmith-4vcpu-ubuntu-2404
    needs: [get-version]
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        include:
          - dockerfile: Dockerfile
            tags:
              - ghcr.io/${{ github.repository_owner }}/basalt-web:latest
              - ghcr.io/${{ github.repository_owner }}/basalt-web:__VERSION__
    env:
      VERSION: ${{ needs.get-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - name: Replace version in tags
        id: tags
        run: |
          VERSION="${{ needs.get-version.outputs.version }}"
          # Normalize version (strip leading v)
          CLEAN_VERSION="${VERSION#v}"

          TAGS_JSON=$(jq -nc --argjson tags "$(jq -c '.tags' <<< '${{ toJson(matrix) }}')" '$tags')
          TAGS=$(echo "$TAGS_JSON" | jq -r '.[]' | sed "s/__VERSION__/$CLEAN_VERSION/g")

          # If version contains a prerelease identifier, drop :latest
          if [[ "$CLEAN_VERSION" =~ -(rc|alpha|beta) ]]; then
            TAGS=$(echo "$TAGS" | grep -v ':latest' || true)
          fi

          TAGS=$(echo "$TAGS" | paste -sd "," -)
          echo "tags=$TAGS" >> $GITHUB_OUTPUT
      - name: Setup Docker Builder
        uses: useblacksmith/setup-docker-builder@v1
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        # Using Blacksmith to take advantage of persistence of Docker caching
        uses: useblacksmith/build-push-action@v2
        with:
          context: .
          file: ./containers/${{ matrix.dockerfile }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.tags.outputs.tags }}
